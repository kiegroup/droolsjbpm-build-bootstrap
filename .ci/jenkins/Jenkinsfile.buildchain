@Library('jenkins-pipeline-shared-libraries')_

agentLabel = "${env.ADDITIONAL_LABEL?.trim() ? ADDITIONAL_LABEL : 'kie-rhel7 && kie-mem24g'} && !master"
additionalArtifactsToArchive = "${env.ADDITIONAL_ARTIFACTS_TO_ARCHIVE?.trim() ?: ''}"
additionalTimeout = "${env.ADDITIONAL_TIMEOUT?.trim() ?: 1200}"
additionalExcludedArtifacts = "${env.ADDITIONAL_EXCLUDED_ARTIFACTS?.trim() ?: ''}"
checkstyleFile = env.CHECKSTYLE_FILE?.trim() ?: null
findbugsFile = env.FINDBUGS_FILE?.trim() ?: null
pr_type = env.PR_TYPE?.trim() ?: null
build_jdk_tool = env.BUILD_JDK_TOOL?.trim() ?: 'kie-jdk11'
build_maven_tool = env.BUILD_MAVEN_TOOL?.trim() ?: 'kie-maven-3.8.1'

pipeline {
    agent {
        label agentLabel
    }
    tools {
        nodejs 'nodejs-12.16.3'
    }
    options {
        timestamps ()
        timeout(time: additionalTimeout, unit: 'MINUTES')
    }
    environment {
        FIREFOX_FOLDER = '/opt/tools/firefox-60esr'
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'
            }
        }
        // executes a script that compresses the consoleText and attaches it to the mail
        stage('build sh script') {
            steps {
                script {
                    mailer.buildLogScriptPR()
                }
            }
        }
        stage('check space before build') {
            steps {
                script{
                    util.spaceLeft()
                }
            }
        }
        stage('Remove partially downloaded deps') {
            steps {
                script{
                    util.rmPartialDeps()
                }
            }
        }
        stage('Build projects') {
            tools {
              jdk build_jdk_tool
              maven build_maven_tool
            }
            steps {
                script {
                    def buildChainActionInfo =
                                isFDBP() ? [action: 'fd', file: 'downstream-production-config.yaml'] :
                                isFDB() ? [action: 'fd', file: 'full-downstream-config.yaml'] :
                                isPR() ? [action: 'pr', file: 'pull-request-config.yaml'] :
                                isCompile() ? [action: 'fd', file: 'compilation-config.yaml'] :
                                [action: 'pr', file: 'upstream-config.yaml']
                    def SETTINGS_XML_ID =
                                isFDBP() ? '5d9884a1-178a-4d67-a3ac-9735d2df2cef' :
                                '771ff52a-a8b4-40e6-9b22-d54c7314aa1e'

                    configFileProvider([configFile(fileId: SETTINGS_XML_ID, variable: 'MAVEN_SETTINGS_FILE')]) {
                        withCredentials([string(credentialsId: 'kie-ci1-token', variable: 'GITHUB_TOKEN')]) {
                            sh "build-chain-action -token=${GITHUB_TOKEN} -df='https://raw.githubusercontent.com/\${GROUP}/droolsjbpm-build-bootstrap/\${BRANCH}/.ci/${buildChainActionInfo.file}' -folder='bc' build ${buildChainActionInfo.action} -url=${env.ghprbPullLink} --skipParallelCheckout -cct '(^mvn .*)||\$1 -s ${MAVEN_SETTINGS_FILE} -Dmaven.wagon.http.ssl.insecure=true'"
                        }
                    }
                }
            }
        }
        stage('Sonar analysis') {
            tools {
              jdk "kie-jdk11"
              maven 'kie-maven-3.8.1'
            }
            steps {
                script {
                    if(isPR()) {
                        def project = util.getProjectTriggeringJob()[1]
                        if(["optaplanner", "drools", "appformer", "jbpm", "drools-wb", "kie-soup", "droolsjbpm-integration", "kie-wb-common", "openshift-drools-hacep", "optaweb-employee-rostering", "optaweb-vehicle-routing"].contains(project))
                        {
                            dir("bc/kiegroup_${project.replaceAll("-", "_")}") {
                                maven.runMavenWithSettingsSonar("771ff52a-a8b4-40e6-9b22-d54c7314aa1e", "-nsu generate-resources -Psonarcloud-analysis -Denforcer.skip=true", "SONARCLOUD_TOKEN", "sonar_analysis.maven.log")
                            }
                        } else {
                            println "Project ${project} shouldn't be analyzed by sonarcloud"
                        }
                    } else {
                        println "[INFO] No sonar analysis execution."
                    }
                }
            }
        }
        stage('check space after build') {
            steps {
                script{
                    util.spaceLeft()
                }
            }
        }
    }
    post {
        fixed {
            script {
                mailer.sendEmail_fixedPR(pr_type)
            }
        }
        aborted {
            script {
                mailer.sendEmail_abortedPR(pr_type)
            }
        }
        failure {
            sh '$WORKSPACE/trace.sh'
            script {
                mailer.sendEmail_failedPR(pr_type)
            }
        }
        unstable {
            script {
                mailer.sendEmail_unstablePR(pr_type)
            }
        }
        always {
            script {
                util.printGitInformationReport()
            }
            echo 'Generating JUnit report...'
            junit allowEmptyResults: true, healthScaleFactor: 1.0, testResults: '**/target/*-reports/TEST-*.xml'

            echo 'Archiving logs...'
            archiveArtifacts excludes: '**/target/checkstyle.log', artifacts: '**/*.maven.log,**/target/*.log', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true

            echo 'Archiving testStatusListener and screenshots artifacts...'
            archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/testStatusListener*,**/target/screenshots/**', excludes: additionalExcludedArtifacts, fingerprint: false, defaultExcludes: true, caseSensitive: true

            echo 'Archiving wars...'
            archiveArtifacts artifacts: '**/target/business-monitoring-webapp.war,**/target/business-central*wildfly*.war,**/target/business-central*eap*.war,**/target/kie-server-*ee7.war,**/target/kie-server-*webc.war,**/target/dashbuilder-runtime.war', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true

            echo 'Archiving zips...'
            archiveArtifacts artifacts: '**/target/jbpm-server*dist*.zip', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true

            script {
                if(additionalArtifactsToArchive) {
                    echo 'Archiving additional Artifacts ...'
                    archiveArtifacts allowEmptyArchive: true, artifacts: additionalArtifactsToArchive, excludes: additionalExcludedArtifacts, fingerprint: false, defaultExcludes: true, caseSensitive: true
                }
            }
            
            script {
                if(findbugsFile) {
                    echo 'Findbugs reports ...'
                    recordIssues( enabledForFailure: true, aggregatingResults: true, tool: spotBugs(pattern: findbugsFile) )
                }
            }
            
            script {
                if(checkstyleFile) {
                    echo 'Checkstyle reports ...'
                    recordIssues( enabledForFailure: true, aggregatingResults: true, tool: checkStyle(pattern: checkstyleFile) )
                }
            }

        }
        cleanup {
            script {
                util.cleanNode()
            }
        }
    }
}

def isFDBP(){
    return (JOB_NAME =~ /\/[a-z,A-Z\-\_0-9\.]*\.fdbp/).find();
}

def isFDB(){
    return (JOB_NAME =~ /\/[a-z,A-Z\-\_0-9\.]*\.fdb/).find();
}

def isPR(){
    return (JOB_NAME =~ /\/[a-z,A-Z\-\_0-9\.]*\.pr/).find();
}

def isCompile(){
    return (JOB_NAME =~ /\/[a-z,A-Z\-\_0-9\.]*\.compile/).find();
}
