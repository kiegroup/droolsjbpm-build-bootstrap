@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'rhos-01-kie-rhel7 && kie-mem24g && !master'
    }
    tools {
        maven 'kie-maven-3.8.1'
        jdk 'kie-jdk11'
    }
    parameters {
        string(description: 'The deployment URL', name: 'KIE_GROUP_DEPLOYMENT_REPO_URL')
        booleanParam(description: 'Skip Tests? True as default', name: 'SKIP_TESTS', defaultValue: true)
        string(description: 'The UMB message version', name: 'UMB_VERSION', defaultValue: 'main')
        string(description: 'The product version', name: 'PRODUCT_VERSION')
        string(description: 'The config repository branch', name: 'CONFIG_BRANCH', defaultValue: 'main')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timestamps()
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'

            }
        }
        stage('Remove partially downloaded deps') {
            steps {
                script{
                    util.rmPartialDeps()
                }
            }
        }
        stage('Clone build configuration repo') {
            steps {
                script {
                    def currentBranch = env.CONFIG_BRANCH ?: env.DEFAULT_CONFIG_BRANCH ?: env.BRANCH_NAME ?: env.GIT_BRANCH
                    println "Checking out ${env.BUILD_CONFIGURATION_REPO_URL}:${currentBranch} into build_config folder"
                    sh "git clone -b ${currentBranch} --single-branch ${env.BUILD_CONFIGURATION_REPO_URL} build_config"
                }
            }
        }
        stage('Build Nightly projects') {
            steps {
                script {
                    timeout(time: 20, unit: 'HOURS') {
                        def SETTINGS_XML_ID = "rhba-prod-main"

                        // This is the map project, variable to store the version from this project
                        def repositoryListPath = "./script/repository-list.txt"
                        def branched7RepositoryListPath = "./script/branched-7-repository-list.txt"
                        def projectVariableMap = ['kiegroup_droolsjbpm-build-bootstrap': "kieVersion", 'jboss-integration_izpack': "izpackVersion", 'jboss-integration_installer-commons': "installerCommonsVersion"]

                        configFileProvider([configFile(fileId: "49737697-ebd6-4396-9c22-11f7714808eb", variable: 'PRODUCTION_PROJECT_LIST')]) {
                            println "Reading file ${repositoryListPath} and merging it with ${PRODUCTION_PROJECT_LIST} jenkins file"
                            def communityProjectListFile = readFile repositoryListPath
                            def projectCollection = communityProjectListFile.readLines()
                            def productionProjectListFile = readFile "${env.PRODUCTION_PROJECT_LIST}"
                            projectCollection.addAll(productionProjectListFile.readLines())
                            projectCollection.removeAll { 'droolsjbpm-tools'.equals(it.toLowerCase()) } // The droolsjbpm-tools is skiped
                            println "File ${repositoryListPath} and ${env.PRODUCTION_PROJECT_LIST} jenkins file merged in ${projectCollection}"

                            def currentBranch = env.BRANCH_NAME ?: env.GIT_BRANCH
                            def additionalVariables = [:]
                            if ('main' == currentBranch) {
                                def branched7RepositoryListFile = readFile branched7RepositoryListPath
                                branched7RepositoryListFile.readLines().each { additionalVariables["${it}-scmRevision"] = '7.x' }
                            }

			    retry(3) {
                                pmebuild.buildProjects(projectCollection, "${SETTINGS_XML_ID}", "$WORKSPACE/build_config/rhba/nightly", "${env.PME_CLI_PATH}", projectVariableMap, additionalVariables, [:])
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        cleanup {
            script {
                util.cleanNode()
            }
        }
    }
}
