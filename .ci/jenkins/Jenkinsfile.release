@Library('jenkins-pipeline-shared-libraries')_
import org.jenkinsci.plugins.workflow.libs.Library
import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenStagingHelper


baseBranch = "${env.BASE_BRANCH}"
releaseBranch = "${env.RELEASE_BRANCH}"
agentLabel = "${env.AGENT_LABEL}"
kieVersion = "${env.KIE_VERSION}"
mvnTool = "${env.MVN_TOOL}"
jdkVersion = "${env.JAVADK}"
ghOrgUnit = "${env.GH_ORG_UNIT}"
runBuild = "${env.RUN_BUILD}"
commitMsg = "${env.COMMIT_MSG}"
zipDir = "${env.ZIP_DIR}"
buildNr = "${env.BUILD_NR}"
toolsVer = "${env.TOOLS_VER}"


buildChainGroup = env.BUILDCHAIN_GROUP?.trim() ?: 'kiegroup'
buildChainBranch = env.BUILDCHAIN_BRANCH?.trim() ?: 'main'

retry=0
pipeline {
    agent {
        label agentLabel
    }
    options{
        timestamps()
    }
    tools {
        nodejs 'nodejs-16.2.0'
        maven mvnTool
        jdk jdkVersion
    }
    environment {
        FIREFOX_FOLDER = '/opt/tools/firefox-91esr'
        MAVEN_DIR = "${env.M2DIR}"
        B_BRANCH = "${env.BASE_BRANCH}"
        R_BRANCH = "${env.RELEASE_BRANCH}"
        COM_MSG = "${env.COMMIT_MSG}"
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'
            }
        }
        stage('Create clean up script') {
            steps {
                sh 'cat > "$WORKSPACE/clean-up.sh" << EOT \n' +
                        'cd \\$1 \n' +
                        '# Add test reports to the index to prevent their removal in the following step \n' +
                        'git add --force **target/*-reports/TEST-*.xml \n' +
                        'git clean -ffdx \n' +
                        'EOT'
                sh 'chmod 755 $WORKSPACE/clean-up.sh'
            }
        }
        stage('Does the release branch already exist'){
             steps{
                 sshagent(['kie-ci-user-key']) {
                     script {
                         env.R_BRANCH_EXIST = sh(script: "git ls-remote --heads https://github.com/${ghOrgUnit}/droolsjbpm-build-bootstrap ${releaseBranch} | wc -l", returnStdout: true).trim()
                         echo "R_BRANCH_EXIST: ${env.R_BRANCH_EXIST}"
                         if ( "${env.R_BRANCH_EXIST}" == "1" ) {
                            echo "release branch exists"
                         } else {
                            echo "release branch does not yes exist"
                         }
                     }
                 }
             }
        }
        stage('CHECKOUT_BRANCH = BASE_BRANCH since RELEASE_BRANCH doesn\'t yet exist'){
            when{
                expression { env.R_BRANCH_EXIST == '0' }
            }
            steps {
                script {
                    env.CHECKOUT_BRANCH = "${env.B_BRANCH}"
                    echo "CHECKOUT_BRANCH=${env.CHECKOUT_BRANCH}"
                }
            }
        }
        stage('CHECKOUT_BRANCH =  RELEASE_BRANCH'){
            when{
                expression { env.R_BRANCH_EXIST == '1' }
            }
            steps {
                script {
                    env.CHECKOUT_BRANCH = "${env.R_BRANCH}"
                    echo "CHECKOUT_BRANCH=${env.CHECKOUT_BRANCH}"
                }
            }
        }
        stage('Install build-chain tool') {
            steps {
                script {
                    println "[INFO] Getting build-chain version from composite action file"
                    def buildChainVersion = buildChain.getBuildChainVersionFromCompositeActionFile()
                    if([null, 'null'].contains(buildChainVersion)) {
                        def errorMessage = "[ERROR] The build-chain version can't be recovered. Please contact administrator"
                        println errorMessage
                        error(errorMessage)
                    }
                    println "[INFO] build-chain version recovered '${buildChainVersion}'"

                    try {
                        sh "npm install -g @kie/build-chain-action@${buildChainVersion} -registry=${NPM_REGISTRY_URL}"
                    } catch(e) {
                        println "[WARNING] Error installing @kie/build-chain-action@${buildChainVersion}. Did you check the version is already published at https://www.npmjs.com/package/@kie/build-chain-action ? In case it is you should wait few minutes for ${NPM_REGISTRY_URL} to be synched up. Otherwise check latest 'Publish' action at https://github.com/kiegroup/github-action-build-chain/actions or contact kiegroup/github-action-build-chain responsible."
                        println "[INFO] Final @kie/build-chain-action version to be used: ${sh(returnStdout: true, script: 'npm @kie/build-chain-action -v').trim()}"
                    }
                }
            }
        }
        stage('Update versions and push release branches to github'){
            when{
                  allOf{
                      expression { runBuild == 'YES' }
                      expression { env.R_BRANCH_EXIST == '0' }
                  }
            }
            steps{
                script {
                    def buildChainActionInfo = [action: 'branch', file: 'update-versions-release.yaml']
                    withCredentials([string(credentialsId: 'kie-ci5-token', variable: 'GITHUB_TOKEN')]) {
                        sh "build-chain build ${buildChainActionInfo.action} --token=${GITHUB_TOKEN} -f 'https://raw.githubusercontent.com/${buildChainGroup}/droolsjbpm-build-bootstrap/${buildChainBranch}/.ci/${buildChainActionInfo.file}' -o 'bc' -p '${buildChainGroup}/droolsjbpm-build-bootstrap' -b '${env.CHECKOUT_BRANCH}' --fullProjectDependencyTree --skipParallelCheckout"
                    }
                }
            }
        }
        // email send automatically when release starts and the release branches are not created
        stage('send email when release starts'){
            when{
                expression { env.R_BRANCH_EXIST == '0' }
            }
            steps {
                emailext body: """
                The build for community release ${kieVersion} started.

                @leads: Please look at the sanity checks: https://docs.google.com/spreadsheets/d/1jPtRilvcOji__qN0QmVoXw6KSi4Nkq8Nz_coKIVfX6A/edit#gid=167259416
                and assign tasks to people who should run these checks (if not done yet)


                Thank you""", subject: "start of community-release ${kieVersion}", to: "mbiarnes@redhat.com mnovotny@redhat.com lazarotti@redhat.com dgutierr@redhat.com aparedes@redhat.com doliver@redhat.com"
            }
        }
        stage('Build projects when release branch does not exist') {
            when{
                allOf{
                    expression { runBuild == 'YES' }
                    expression { env.R_BRANCH_EXIST == '0' }
                }
            }
            steps {
                script {
                    def buildChainActionInfo = [action: 'branch', file: 'release-config.yaml']
                    def SETTINGS_XML_ID = '771ff52a-a8b4-40e6-9b22-d54c7314aa1e'
                    configFileProvider([configFile(fileId: SETTINGS_XML_ID, variable: 'MAVEN_SETTINGS_FILE')]) {
                        withCredentials([string(credentialsId: 'kie-ci5-token', variable: 'GITHUB_TOKEN')]) {
                            sh "build-chain build ${buildChainActionInfo.action} --token=${GITHUB_TOKEN} -f 'https://raw.githubusercontent.com/${buildChainGroup}/droolsjbpm-build-bootstrap/${buildChainBranch}/.ci/${buildChainActionInfo.file}' -o 'bc' -p '${buildChainGroup}/droolsjbpm-build-bootstrap' -b '${env.CHECKOUT_BRANCH}' --fullProjectDependencyTree --skipCheckout -t '(^mvn .*)||\$1 -s ${MAVEN_SETTINGS_FILE} -Dkie.maven.settings.custom=${MAVEN_SETTINGS_FILE} -Dmaven.wagon.http.ssl.insecure=true'"
                        }
                    }
                }
            }
        }
        stage('Build projects when release branch exist') {
            when{
                allOf{
                    expression { runBuild == 'YES' }
                    expression { env.R_BRANCH_EXIST == '1' }
                }
            }
            steps {
                script {
                    def buildChainActionInfo = [action: 'branch', file: 'release-config.yaml']
                    def SETTINGS_XML_ID = '771ff52a-a8b4-40e6-9b22-d54c7314aa1e'
                    configFileProvider([configFile(fileId: SETTINGS_XML_ID, variable: 'MAVEN_SETTINGS_FILE')]) {
                        withCredentials([string(credentialsId: 'kie-ci5-token', variable: 'GITHUB_TOKEN')]) {
                            sh "build-chain build ${buildChainActionInfo.action} --token=${GITHUB_TOKEN} -f 'https://raw.githubusercontent.com/${buildChainGroup}/droolsjbpm-build-bootstrap/${buildChainBranch}/.ci/${buildChainActionInfo.file}' -o 'bc' -p '${buildChainGroup}/droolsjbpm-build-bootstrap' -b '${env.CHECKOUT_BRANCH}' --fullProjectDependencyTree --skipParallelCheckout -t '(^mvn .*)||\$1 -s ${MAVEN_SETTINGS_FILE} -Dkie.maven.settings.custom=${MAVEN_SETTINGS_FILE} -Dmaven.wagon.http.ssl.insecure=true'"
                        }
                    }
                }
            }
        }
        stage('Publish JUnit test results reports') {
            when{
                expression { runBuild == 'YES'}
            }
            steps {
                execute {
                    junit '**/target/*-reports/TEST-*.xml'
                }
            }
        }
        //send mail if build fails
        stage('send mail only if build fails'){
            when{
                expression { currentBuild.currentResult == 'FAILURE'}
            }
            steps{
                emailext body: """
                Build of community release ${kieVersion} failed.

                Please look here: ${BUILD_URL}consoleText

                LOG: attached""", subject: "community-release ${kieVersion} failed", to: "mbiarnes@redhat.com mnovotny@redhat.com", attachLog:true
            }
        }
        // create a local directory for archiving artifacts
        stage('Create upload dir') {
            when{
                expression { runBuild == 'YES'}
            }
            steps {
                script {
                    execute {
                        // creates a directory ${kieVersion}"_uploadBinaries with binaries for the web-pages
                        sh './script/release/prepareUploadDir.sh'
                    }
                }
            }
        }
        // the directory of ${kieVersion}_uploadBinaries will be compressed
        stage('tar.gz uploadDir & archive artifacts'){
            when{
                expression { runBuild == 'YES'}
            }
            steps {
               script {
                   execute {
                       sh "tar -czvf ${kieVersion}_uploadBinaries.tar.gz ${kieVersion}_uploadBinaries"
                       archiveArtifacts '*.tar.gz'
                       sh "rm -rf ${kieVersion}_uploadBinaries.tar.gz"
                   }
               }
            }
        }
        // binaries will be compressed and uploaded to Nexus
        stage('Upload binaries to staging repository on Nexus') {
            when{
                expression { runBuild == 'YES'}
            }
            steps {
                execute {
                    withCredentials([usernameColonPassword(credentialsId: 'kie_upload_Nexus', variable: 'CREDS')]) {
                        dir("$WORKSPACE/${zipDir}"){
                            script {
                                env.repoID = sh(script: """curl --header 'Content-Type: application/xml' -X POST -u $CREDS --data "<promoteRequest><data><description>kie-${kieVersion}</description></data></promoteRequest>" -v https://repository.jboss.org/nexus/service/local/staging/profiles/15c58a1abc895b/start -H "Connection: close" | grep -oP '(?<=stagedRepositoryId>).*[0-9]' """, returnStdout: true).trim()
                                echo "repoID: ${repoID}"
                                def repositories=['dashbuilder', 'drools', 'jbpm', 'uberfire']
                                repositories.each{ repo ->
                                    sh "zip -qr ${repo}.zip org/${repo}"
                                    sh """curl --silent --upload-file ${repo}.zip -u \$CREDS -v https://repository.jboss.org/nexus/service/local/repositories/\$repoID/content-compressed -H "Connection: keep-alive" -H "Keep-Alive: timeout=1800000, max=0" """
                                }
                                /* org.kie has to be split */
                                sh "sh $WORKSPACE/script/release/12_splitOrgKie.sh"
                                sh """curl --header "Content-Type: application/xml" -X POST -u \$CREDS --data "<promoteRequest><data><stagedRepositoryId>${repoID}</stagedRepositoryId><description>kie-${kieVersion}</description></data></promoteRequest>" -v https://repository.jboss.org/nexus/service/local/staging/profiles/15c58a1abc895b/finish -H "Connection: close" """
                            }
                        }
                    }
                }
            }
        }
        stage('status of staging-repository'){
            when{
                expression { runBuild == 'YES'}
            }
            steps {
                withCredentials([usernameColonPassword(credentialsId: 'kie_upload_Nexus', variable: 'CREDS')]) {
                    script{
                        env.STAGING_STATUS = ''
                        counter=0
                        while( "${env.STAGING_STATUS}" != "closed" ){
                            env.STAGING_STATUS = sh(script: """ curl -u $CREDS -H 'Accept: application/json' -H 'Content-Type: application/json' https://repository.jboss.org/nexus/service/local/staging/profile_repositories/15c58a1abc895b | grep -oP '$repoID\",\"type\":\"\\K[^\"]+(?=\")' """, returnStdout: true).trim()
                            echo "staging-repository is still ${STAGING_STATUS}"
                            sleep(60*15)
                            counter=counter+1
                            echo "counter: $counter"
                        }
                        echo "staging-repository is ${STAGING_STATUS} now"
                    }
                }
            }
        }
        stage('Additional tests for community') {
            when{
                expression { runBuild == 'YES'}
            }
            parallel{
               stage('jbpmTestCoverageMatrix'){
                   steps{
                       build job: "jbpmTestCoverageMatrix", propagate: false, parameters: [[$class: 'StringParameterValue', name: 'kieVersion', value: kieVersion]]
                   }
               }
               stage('kieWbTestMatrix'){
                   steps{
                       build job: "kieWbTestMatrix", propagate: false, parameters: [[$class: 'StringParameterValue', name: 'kieVersion', value: kieVersion]]
                   }
               }
               stage('kieServerMatrix'){
                   steps{
                       build job: "kieServerMatrix", propagate: false, parameters: [[$class: 'StringParameterValue', name: 'kieVersion', value: kieVersion]]
                   }
               }
            }
        }
        // send email for Sanity Checks
        stage('send email with build result'){
            when{
                 expression { runBuild == 'YES'}
            }
            steps{
                emailext body: """
                The status of community release ${kieVersion} was ${currentBuild.currentResult}

                Failed tests: ${BUILD_URL}testReport

                The artifacts are available here..:
                business-central artifacts: https://repository.jboss.org/nexus/content/groups/kie-group/org/kie/business-central/${kieVersion}/
                business-central-webapp: https://repository.jboss.org/nexus/content/groups/kie-group/org/kie/business-central-webapp/${kieVersion}/
                business-monitoring-webapp: https://repository.jboss.org/nexus/content/groups/kie-group/org/kie/business-monitoring-webapp/${kieVersion}/

                Please download for sanity checks: jbpm-server-distribution.zip: https://repository.jboss.org/nexus/content/groups/kie-group/org/kie/jbpm-server-distribution/${kieVersion}/
                Please download the needed binaries, fill in your assigned test scenarios and check the failing tests
                sanity checks: https://docs.google.com/spreadsheets/d/1jPtRilvcOji__qN0QmVoXw6KSi4Nkq8Nz_coKIVfX6A/edit#gid=167259416
                In case Sanity Checks were already done and this kind of mail arrives the second time, please verify if the bugs reported in Sanity Checks are fixed now.

                Component version: KIE version =  ${kieVersion}""", subject: "build for community-release ${kieVersion}: ${currentBuild.currentResult}", to: "mbiarnes@redhat.com mnovotny@redhat.com"
            }
        }
        // user interaction required: continue or abort
        stage('Approval (ATTENTION: the point of NO RETURN was reached)') {
            steps {
                input message: 'Was the build stable enough to continue releasing? \n Please release the staging repository on Nexus before continuing the pipeline', ok: 'Continue'
            }
        }
        // the tags of the release will be created and pushed to github
        stage('Push community tags'){
            steps{
                execute {
                    script {
                        def buildChainActionInfo = [action: 'branch', file: 'create-push-tags.yaml']
                        withCredentials([string(credentialsId: 'kie-ci5-token', variable: 'GITHUB_TOKEN')]) {
                            sh "build-chain build ${buildChainActionInfo.action} --token=${GITHUB_TOKEN} -f 'https://raw.githubusercontent.com/${buildChainGroup}/droolsjbpm-build-bootstrap/${buildChainBranch}/.ci/${buildChainActionInfo.file}' -o 'bc' -p '${buildChainGroup}/droolsjbpm-build-bootstrap' -b '${env.CHECKOUT_BRANCH}' --fullProjectDependencyTree --skipCheckout"
                        }
                    }
                }
            }
        }
        stage ('Send email to BSIG') {
            steps {
                emailext body: """
                The community ${kieVersion} was released.

                The tags are pushed and the binaries for the webs will be uploaded soon to filemgmt.jboss.org.

                You can download the artifacts..:
                business-central artifacts: https://repository.jboss.org/nexus/content/groups/public-jboss/org/kie/business-central/${kieVersion}/
                business-central-webapp: https://repository.jboss.org/nexus/content/groups/public-jboss/org/kie/business-central-webapp/${kieVersion}/
                business-monitoring-webapp: https://repository.jboss.org/nexus/content/groups/public-jboss/org/kie/business-monitoring-webapp/${kieVersion}/
                jbpm-server-distribution (single zip): https://repository.jboss.org/nexus/content/groups/public-jboss/org/kie/jbpm-server-distribution/${kieVersion}/

                Component version: KIE Version = ${kieVersion}""", subject: "community-release ${kieVersion} was released", to: "mbiarnes@redhat.com mnovotny@redhat.com"
            }
        }
        // if the pipeline job was executed again but without building, the binaries uploaded to filemgmt.jboss.org are needed
        stage('BUILD NUMBER of desired binaries') {
            when{
                expression { runBuild == 'NO'}
            }
            //interactive step: user should select the BUILD Nr of the artifacts to restore
            steps {
                script {
                    execute {
                        buildNr = input id: 'binariesID', message: 'Which build number has the desired binaries \n DBN (desired build number)', parameters: [string(defaultValue: '', description: '', name: 'DBN')]
                        echo 'BUILD_NUMBER= ' + "$buildNr"
                    }
                }
            }
        }
        // fetch binaries to upload to filemgmt.jbosss.org
        stage('Pull binaries of previous build') {
            when{
                expression { runBuild == 'NO'}
            }
            steps {
                echo 'BUILD NUMBER= ' + "$buildNr"
                step([  $class: 'CopyArtifact',
                    filter: '*.tar.gz',
                    fingerprintArtifacts: true,
                    projectName: '${JOB_NAME}',
                    selector: [$class: 'SpecificBuildSelector', buildNumber: "$buildNr"]
                ])
                sh "tar -xzvf ${kieVersion}_uploadBinaries.tar.gz"
                sh 'ls -al'
            }
        }
        stage('Drools binaries upload'){
            steps{
                script {
                    execute {
                        sshagent(['drools-filemgmt']) {
                            sh './script/release/10a_drools_upload_filemgmt.sh'
                        }
                    }
                }
            }
        }
        stage('Create jbpm installers') {
            steps {
                script {
                    execute {
                        sh "./script/release/09_createjBPM_installers.sh ${toolsVer}"
                    }
                }
            }
        }
        stage('Jbpm binaries upload'){
            steps{
                script {
                    execute {
                        sshagent(['jbpm-filemgmt']) {
                            sh './script/release/10b_jbpm_upload_filemgmt.sh'
                        }
                    }
                }
            }
        }
    }
}
void execute(Closure closure) {
    try {
        closure()
    } catch(error) {
        repeat = new ChoiceParameterDefinition('ACTION', ['repeat', 'skip'] as String[], 'This step failed and waits for user interaction')
        def result = input message: 'What do you want to do?', parameters: [repeat]
        if ( "${result}" == 'repeat') {
            retry++
            echo "This is retry number ${retry}"
            execute(closure)
        }
    }
}
