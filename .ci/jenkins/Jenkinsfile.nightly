@Library('jenkins-pipeline-shared-libraries')_

localNexusRepositoryId = "${env.LOCAL_NEXUS_REPOSITORY_ID?.trim() ? LOCAL_NEXUS_REPOSITORY_ID : 'rhba-main-nightly'}"
def tagName = "nightly-${PRODUCT_VERSION}.redhat-${new Date().format('yyyyMMddHHmm')}"

pipeline {
    agent {
        label 'kie-rhel7-pipeline && kie-mem24g && !built-in'
    }
    tools {
        maven 'kie-maven-3.8.1'
        jdk 'kie-jdk11'
    }
    environment {
        LOCAL_NEXUS_REPOSITORY_ID = "${localNexusRepositoryId}"
    }
    parameters {
        string(description: 'The deployment URL', name: 'KIE_GROUP_DEPLOYMENT_REPO_URL')
        booleanParam(description: 'Skip Tests? True as default', name: 'SKIP_TESTS', defaultValue: true)
        string(description: 'The UMB message version', name: 'UMB_VERSION', defaultValue: 'main')
        string(description: 'The product version', name: 'PRODUCT_VERSION')
        string(description: 'The config repository branch', name: 'CONFIG_BRANCH', defaultValue: 'main')
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timestamps()
    }
    stages {
        stage('Initialize') {
            steps {
                sh 'printenv'

            }
        }
        stage('Remove partially downloaded deps') {
            steps {
                script{
                    util.rmPartialDeps()
                }
            }
        }
        stage('Clone build configuration repo') {
            steps {
                script {
                    def currentBranch = env.CONFIG_BRANCH ?: env.DEFAULT_CONFIG_BRANCH ?: env.BRANCH_NAME ?: env.GIT_BRANCH
                    println "Checking out ${env.BUILD_CONFIGURATION_REPO_URL}:${currentBranch} into build_config folder"
                    sh "git clone -b ${currentBranch} --single-branch ${env.BUILD_CONFIGURATION_REPO_URL} build_config"
                }
            }
        }
        stage('Build Nightly projects') {
            steps {
                script {
                    def SETTINGS_XML_ID = "rhba-prod-main"

                    // This is the map project, variable to store the version from this project
                    def repositoryListPath = "./script/repository-list.txt"
                    def branched7RepositoryListPath = "./script/branched-7-repository-list.txt"
                    def projectVariableMap = ['kiegroup_droolsjbpm-build-bootstrap': "kieVersion", 'jboss-integration_izpack': "izpackVersion", 'jboss-integration_installer-commons': "installerCommonsVersion"]

                    configFileProvider([configFile(fileId: "49737697-ebd6-4396-9c22-11f7714808eb", variable: 'PRODUCTION_PROJECT_LIST')]) {
                        println "Reading file ${repositoryListPath} and merging it with ${PRODUCTION_PROJECT_LIST} jenkins file"
                        def communityProjectListFile = readFile repositoryListPath
                        def projectCollection = communityProjectListFile.readLines()
                        def productionProjectListFile = readFile "${env.PRODUCTION_PROJECT_LIST}"
                        projectCollection.addAll(productionProjectListFile.readLines())
                        projectCollection.removeAll { 'droolsjbpm-tools'.equals(it.toLowerCase()) } // The droolsjbpm-tools is skiped
                        println "File ${repositoryListPath} and ${env.PRODUCTION_PROJECT_LIST} jenkins file merged in ${projectCollection}"

                        def currentBranch = env.BRANCH_NAME ?: env.GIT_BRANCH
                        def additionalVariables = [:]
                        if ('main' == currentBranch) {
                            def branched7RepositoryListFile = readFile branched7RepositoryListPath
                            branched7RepositoryListFile.readLines().each { additionalVariables["${it}-scmRevision"] = '7.x' }
                        }

                        retry(3) {
                            timeout(time: 8, unit: 'HOURS') {
                                pmebuild.buildProjects(projectCollection, "${SETTINGS_XML_ID}", "$WORKSPACE/build_config/rhba/nightly", "${env.PME_CLI_PATH}", projectVariableMap, additionalVariables, [:])
                            }
                        }
                    }
                }
            }
        }
        stage ("Create tags in prod repositories") {
            steps {
                script {
                    def projectsToTagWithProdRepoName = ["jboss-integration/bxms-patch-tools": "bxms-patch-tools"]
                    projectsToTagWithProdRepoName.each { project ->
                        def projectGroupName = util.getProjectGroupName(project.key)
                        def group = projectGroupName[0]
                        def name = projectGroupName[1]
                        dir("${env.WORKSPACE}/${group}_${name}") {
                            def remoteName = "prod"
                            githubscm.commitChanges("PME changes for ${tagName}")
                            githubscm.tagRepository(tagName)
                            githubscm.addRemote(remoteName, "${env.PRODUCTIZATION_REPOSITORY_BASE_URL}/${project.value}")
                            githubscm.pushRemoteTag(remoteName, tagName, "gerrit-user")
                        }
                    }
                }
            }
        }
        stage('Generate RHPAM Properties Files') {
            steps {
                script {
                    def PME_BUILD_VARIABLES = env.PME_BUILD_VARIABLES.split(";").collect{ it.split("=")}.inject([:]) {map, item -> map << [(item.length == 2 ? item[0] : null): (item.length == 2 ? item[1] : null)]}

                    build job: env.RHPAM_PROPERTIES_GENERATOR_PATH, parameters: [
                        [$class: 'BooleanParameterValue', name: 'IS_RELEASE', value: false],
                        [$class: 'StringParameterValue', name: 'BRANCH_NAME', value: env.BRANCH_NAME],
                        [$class: 'StringParameterValue', name: 'TAG_HASH', value: tagName],
                        [$class: 'StringParameterValue', name: 'KIE_VERSION', value: PME_BUILD_VARIABLES['kieVersion']],
                        [$class: 'StringParameterValue', name: 'PRODUCT_VERSION', value: PME_BUILD_VARIABLES['productVersion']],
                        [$class: 'StringParameterValue', name: 'TIME_STAMP', value: "${PME_BUILD_VARIABLES['datetimeSuffix']}"],
                        [$class: 'StringParameterValue', name: 'MVEL_VERSION', value: PME_BUILD_VARIABLES['mvelVersion']],
                        [$class: 'StringParameterValue', name: 'IZPACK_VERSION', value: PME_BUILD_VARIABLES['izpackVersion']],
                        [$class: 'StringParameterValue', name: 'INSTALLER_COMMONS_VERSION', value: PME_BUILD_VARIABLES['installerCommonsVersion']]
                    ]
                }
            }
        }
        stage('Upload Files to repository') {
            steps {
                script {
                    echo "[INFO] Start uploading ${env.WORKSPACE}/deployDirectory"
                    dir("${env.WORKSPACE}/deployDirectory") {
                        withCredentials([usernameColonPassword(credentialsId: "${env.NIGHTLY_DEPLOYMENT_CREDENTIAL}", variable: 'deploymentCredentials')]) {
                            sh "zip -qr kiegroup ."
                            sh "curl --fail --upload-file kiegroup.zip -u $deploymentCredentials -v ${KIE_GROUP_DEPLOYMENT_REPO_URL}"
                        }
                    }
                }
            }
        }
        stage ("Send RHPAM UMB Message to QE.") {
            steps {
                script {
                    echo "[INFO] Sending RHPAM UMB message to QE."
                    def PME_BUILD_VARIABLES = env.PME_BUILD_VARIABLES.split(";").collect{ it.split("=")}.inject([:]) {map, item -> map << [(item.length == 2 ? item[0] : null): (item.length == 2 ? item[1] : null)]}

                    def propertiesFileUrl = "${env.STAGING_SERVER_URL}/rhpam/RHPAM-${PME_BUILD_VARIABLES['productVersion']}.${PME_BUILD_VARIABLES['milestone']}/rhpam-${PME_BUILD_VARIABLES['datetimeSuffix']}.properties"
                    def topic = "VirtualTopic.qe.ci.ba.rhpam.${env.UMB_VERSION}.nightly.trigger"
                    def eventType = "rhpam-${env.UMB_VERSION}-nightly-qe-trigger"

                    echo "[INFO] Message Body: ${propertiesFileUrl}"
                    echo "[INFO] Topic: ${topic}"
                    echo "[INFO] Event Type: ${eventType}"
                    build job: env.SEND_UMB_MESSAGE_JOB_PATH, parameters: [
                            [$class: 'StringParameterValue', name: 'MESSAGE_BODY', value: propertiesFileUrl],
                            [$class: 'StringParameterValue', name: 'TOPIC', value: topic],
                            [$class: 'StringParameterValue', name: 'EVENT_TYPE', value: eventType]
                    ]
                    echo "[SUCCESS] Message was successfully sent."
                }
            }
        }
    }
    post {
        failure {
            emailext body: '${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} \n' +
                    ' \n' +
                    '${BUILD_LOG, maxLines=750}', subject: '${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        unstable {
            emailext body: '${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL} \n' +
                    ' \n' +
                    'Failed tests: ${BUILD_URL}/testReport \n' +
                    ' \n' +
                    '${BUILD_LOG, maxLines=750}', subject: '${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        fixed {
            emailext body: '${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER} was: ' + "${currentBuild.currentResult}" +  '\n' +
                    'Please look here: ${BUILD_URL}', subject: '${PRODUCT_VERSION}:nightly-build #${BUILD_NUMBER}: ' + "${currentBuild.currentResult}", to: 'kie-jenkins-builds@redhat.com'
        }
        always {
            archiveArtifacts artifacts: '**/*.maven.log', fingerprint: false, defaultExcludes: true, caseSensitive: true, allowEmptyArchive: true
        }
        cleanup {
            script {
                util.cleanNode()
            }
        }
    }
}
