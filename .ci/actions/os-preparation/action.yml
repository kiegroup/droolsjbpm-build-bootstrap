name: 'OS Preparation'
description: 'Prepares the Operating Systems array based on matrix.json file'

inputs:
  repository:
    description: "The repository containing the matrix.json os configuration"
    required: false
    default: "kiegroup/droolsjbpm-build-bootstrap"
  branch:
    description: "The repository branch from which the matrix configuration must be taken"
    required: false
    default: "main"


outputs:
  operating-systems:
    description: Configured job operating systems
    value: ${{ steps.set-os.outputs.operating_systems }}

runs:
  using: "composite"
  steps:
    - name: Check out droolsjbpm-build-bootstrap
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.branch }}
        path: matrix_preparation
    - id: set-os
      env:
        repo_name: ${{ github.event.repository.name }}
        event: ${{ github.event_name }}
        label_name: ${{ github.event.label.name }}
        config_file: matrix_preparation/.github/matrix-os.json
      shell: bash
      run: |
        os=$(jq --arg config_file "$config_file" --arg repo "$repo_name" --arg event "$event" --arg event_value "$label_name" 'map(.| select(.event==$event and ((.value==null and ((.repository | index( $repo))) or (.repository==null)) or .value==$event_value)))' $GITHUB_WORKSPACE/$config_file | jq "if (length > 1) then (.[] | select(.repository!=null)) else (.[] | select(.repository==null)) end | .os")
        if [ -z "$os" ]; then 
          echo "No configuration found for [repo=$repo_name, event=$event, value=$label_name] at $GITHUB_WORKSPACE/$config_file"
          exit 1
        else
          echo "operating_systems=$(echo $os)" >> $GITHUB_OUTPUT
        fi
    - name: Printing configured operating systems
      shell: bash
      run: echo "Configured os array ${{ steps.set-os.outputs.operating_systems }}"
